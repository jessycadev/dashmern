{"version":3,"file":"nivo-geo.mjs","sources":["../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/hooks.js","../src/GeoMap.js","../src/ResponsiveGeoMap.js","../src/GeoMapCanvas.js","../src/ResponsiveGeoMapCanvas.js","../src/ChoroplethTooltip.js","../src/Choropleth.js","../src/ResponsiveChoropleth.js","../src/ChoroplethCanvas.js","../src/ResponsiveChoroplethCanvas.js","../src/props.js"],"sourcesContent":["import { memo } from 'react'\n\n/**\n * GeoGraticule.propTypes = {\n *     path: PropTypes.func.isRequired,\n *     graticule: PropTypes.func.isRequired,\n *     lineWidth: PropTypes.number.isRequired,\n *     lineColor: PropTypes.string.isRequired,\n * }\n */\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nexport default GeoGraticule\n","import { memo } from 'react'\n\n/**\n * GeoMapFeature.propTypes = {\n *     feature: PropTypes.shape({\n *         id: PropTypes.string.isRequired,\n *         type: PropTypes.oneOf(['Feature']).isRequired,\n *         properties: PropTypes.object,\n *         geometry: PropTypes.object.isRequired,\n *     }).isRequired,\n *     path: PropTypes.func.isRequired,\n *\n *     fillColor: PropTypes.string.isRequired,\n *     borderWidth: PropTypes.number.isRequired,\n *     borderColor: PropTypes.string.isRequired,\n *\n *     onMouseEnter: PropTypes.func.isRequired,\n *     onMouseMove: PropTypes.func.isRequired,\n *     onMouseLeave: PropTypes.func.isRequired,\n *     onClick: PropTypes.func.isRequired,\n * }\n */\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={feature?.fill ?? fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport isFunction from 'lodash/isFunction.js'\nimport get from 'lodash/get.js'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","import { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers = ['graticule', 'features'],\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip,\n        role = 'img',\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","import { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        layers,\n\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nexport default ChoroplethTooltip\n","import { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme, bindDefs } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst Choropleth = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n        role = 'img',\n        defs = [],\n        fill = [],\n    } = props\n\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    const theme = useTheme()\n\n    const boundDefs = bindDefs(defs, boundFeatures, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {boundFeatures.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n                if (layer === 'legends') {\n                    return legends.map((legend, i) => {\n                        return (\n                            <BoxLegendSvg\n                                key={i}\n                                containerWidth={width}\n                                containerHeight={height}\n                                data={legendData}\n                                {...legend}\n                            />\n                        )\n                    })\n                }\n\n                return <Fragment key={i}>{layer({})}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","import { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n    } = props\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                boundFeatures.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: width,\n                        containerHeight: height,\n                        theme,\n                    })\n                })\n            } else {\n                // layer(ctx, {})\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        boundFeatures,\n        legends,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [\n            showTooltipFromEvent,\n            hideTooltip,\n            isInteractive,\n            Tooltip,\n            canvasEl,\n            boundFeatures,\n            projection,\n        ]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, boundFeatures, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n","import ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n\n    fill: [],\n    defs: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n"],"names":["GeoGraticule","memo","_ref","path","graticule","lineWidth","lineColor","_jsx","fill","strokeWidth","stroke","d","GeoMapFeature","_feature$fill","feature","fillColor","borderWidth","borderColor","onClick","onMouseEnter","onMouseMove","onMouseLeave","strokeLinejoin","event","id","projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","projection","useMemo","scale","translate","rotate","geoPath","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","_ref2","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","isFunction","datum","featureKey","get","datumKey","getLabel","getValue","valueFormatter","undefined","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","_extends","formattedValue","color","legendData","useQuantizeColorScaleLegendData","withContainer","props","partialMargin","margin","_props$layers","layers","_props$projectionType","_props$projectionScal","_props$projectionTran","_props$projectionRota","_props$fillColor","_props$borderWidth","_props$borderColor","_props$enableGraticul","enableGraticule","_props$graticuleLineW","graticuleLineWidth","_props$graticuleLineC","graticuleLineColor","_props$isInteractive","isInteractive","_props$onClick","Tooltip","tooltip","_props$role","role","_useDimensions","useDimensions","outerWidth","outerHeight","_useGeoMap","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","children","layer","i","Fragment","ResponsiveGeoMap","ResponsiveWrapper","GeoMap","getFeatureFromMouseEvent","el","_getRelativeCursor","getRelativeCursor","x","y","f","geoContains","invert","_props$pixelRatio","pixelRatio","window","devicePixelRatio","_props$onMouseMove","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","ref","style","cursor","ResponsiveGeoMapCanvas","GeoMapCanvas","ChoroplethTooltip","BasicTooltip","enableChip","_props$match","_props$label","_props$value","_props$colors","_props$unknownColor","_props$legends","legends","_props$tooltip","_props$defs","defs","_props$fill","_useChoropleth","boundDefs","bindDefs","dataKey","targetKey","legend","BoxLegendSvg","containerWidth","containerHeight","ResponsiveChoropleth","Choropleth","renderLegendToCanvas","ResponsiveChoroplethCanvas","ChoroplethCanvas","commonDefaultProps","GeoMapDefaultProps","GeoMapCanvasDefaultProps","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps"],"mappings":"o6BAUA,IAAMA,EAAeC,GAAK,SAAAC,GAA+C,IAA5CC,EAAID,EAAJC,KAAMC,EAASF,EAATE,UAAWC,EAASH,EAATG,UAAWC,EAASJ,EAATI,UACrD,OAAOC,EAAA,OAAA,CAAMC,KAAK,OAAOC,YAAaJ,EAAWK,OAAQJ,EAAWK,EAAGR,EAAKC,MAChF,ICUMQ,EAAgBX,GAClB,SAAAC,GAUM,IAAAW,EATFC,EAAOZ,EAAPY,QACAX,EAAID,EAAJC,KACAY,EAASb,EAATa,UACAC,EAAWd,EAAXc,YACAC,EAAWf,EAAXe,YACAC,EAAOhB,EAAPgB,QACAC,EAAYjB,EAAZiB,aACAC,EAAWlB,EAAXkB,YACAC,EAAYnB,EAAZmB,aAEA,OACId,EAAA,OAAA,CAEIC,KAAmB,OAAfK,EAAS,MAAPC,OAAO,EAAPA,EAASN,MAAIK,EAAIE,EACvBN,YAAaO,EACbN,OAAQO,EACRK,eAAe,QACfX,EAAGR,EAAKW,GACRK,aAAc,SAAAI,GAAK,OAAIJ,EAAaL,EAASS,EAAO,EACpDH,YAAa,SAAAG,GAAK,OAAIH,EAAYN,EAASS,EAAO,EAClDF,aAAc,SAAAE,GAAK,OAAIF,EAAaP,EAASS,EAAO,EACpDL,QAAS,SAAAK,GAAK,OAAIL,EAAQJ,EAASS,EAAM,GATpCT,EAAQU,GAYzB,wOClBG,IAAMC,EAAiB,CAC1BC,mBAAoBC,EACpBC,qBAAsBC,EACtBC,SAAUC,EACVC,aAAcC,EACdC,cAAeC,EACfC,WAAYC,EACZC,gBAAiBC,EACjBC,SAAUC,EACVC,mBAAoBC,EACpBC,cAAeC,GAGNC,EAAY,SAAH5C,GAUhB,IATF6C,EAAK7C,EAAL6C,MACAC,EAAM9C,EAAN8C,OACAC,EAAc/C,EAAd+C,eACAC,EAAehD,EAAfgD,gBACAC,EAAqBjD,EAArBiD,sBACAC,EAAkBlD,EAAlBkD,mBACArC,EAASb,EAATa,UACAC,EAAWd,EAAXc,YACAC,EAAWf,EAAXe,YAEMoC,EAAaC,GAAQ,WACvB,OAAO7B,EAAewB,KACjBM,MAAML,GACNM,UAAU,CAACT,EAAQI,EAAsB,GAAIH,EAASG,EAAsB,KAC5EM,OAAOL,EAChB,GAAG,CACCL,EACAC,EACAC,EACAC,EACAC,EAAsB,GACtBA,EAAsB,GACtBC,EAAmB,GACnBA,EAAmB,GACnBA,EAAmB,KAEjBjD,EAAOmD,GAAQ,WAAA,OAAMI,EAAQL,KAAa,CAACA,IAC3CjD,EAAYkD,GAAQ,WAAA,OAAMK,OAE1BC,EAAQC,IACRC,EAAiBR,GACnB,WAAA,MAA8B,mBAAhBtC,EAA6BA,EAAc,WAAA,OAAMA,CAAW,CAAA,GAC1E,CAACA,IAEC+C,EAAiBC,EAAkB/C,EAAa2C,GAChDK,EAAeX,GACjB,WAAA,MAA4B,mBAAdvC,EAA2BA,EAAY,WAAA,OAAMA,CAAS,CAAA,GACpE,CAACA,IAGL,MAAO,CACHsC,WAAAA,EACAlD,KAAAA,EACAC,UAAAA,EACA0D,eAAAA,EACAC,eAAAA,EACAE,aAAAA,EAER,EAEaC,EAAgB,SAAHC,GAUpB,IATFC,EAAQD,EAARC,SACAC,EAAIF,EAAJE,KACAC,EAAKH,EAALG,MACAC,EAAKJ,EAALI,MACAC,EAAKL,EAALK,MACAC,EAAWN,EAAXM,YACAC,EAAMP,EAANO,OACAC,EAAYR,EAAZQ,aACAC,EAAMT,EAANS,OAEMC,EAAoBvB,GAAQ,WAC9B,OAAIwB,EAAWR,GAAeA,EACvB,SAACxD,EAASiE,GACb,IAAMC,EAAaC,EAAInE,EAASwD,GAC1BY,EAAWD,EAAIF,EAAOT,GAE5B,OAAOU,GAAcA,IAAeE,EAE5C,GAAG,CAACZ,IACEa,EAAW7B,GACb,WAAA,OAAOwB,EAAWP,GAASA,EAAQ,SAAAQ,GAAK,OAAIE,EAAIF,EAAOR,EAAM,CAAA,GAC7D,CAACA,IAECa,EAAW9B,GACb,WAAA,OAAOwB,EAAWN,GAASA,EAAQ,SAAAO,GAAK,OAAIE,EAAIF,EAAOP,EAAM,CAAA,GAC7D,CAACA,IAECa,EAAiB/B,GAAQ,WAC3B,YAAoBgC,IAAhBb,EAAkC,SAAA9D,GAAC,OAAIA,CAAC,EACxCmE,EAAWL,GAAqBA,EAC7Bc,EAAOd,EAClB,GAAG,CAACA,IAEEe,EAAalC,GACf,WAAA,OAAMmC,EAAwBf,GAAQE,OAAOA,EAAO,GACpD,CAACF,EAAQE,IAEPX,EAAeX,GAAQ,WACzB,OAAO,SAAAxC,GACH,YAAsBwE,IAAlBxE,EAAQ0D,MAA4BG,EACjCa,EAAW1E,EAAQ0D,OAElC,GAAG,CAACgB,EAAYb,IAEVe,EAAgBpC,GAClB,WAAA,OACIc,EAASuB,KAAI,SAAA7E,GACT,IAAMiE,EAAQV,EAAKuB,MAAK,SAAAb,GAAK,OAAIF,EAAkB/D,EAASiE,MACtDc,EAAaT,EAASL,GAE5B,GAAIA,EAAO,CACP,IAAMe,EAAeC,EAAA,CAAA,EACdjF,EAAO,CACVuD,KAAMU,EACNP,MAAOqB,EACPG,eAAgBX,EAAeQ,KAKnC,OAHAC,EAAgBG,MAAQhC,EAAa6B,GACrCA,EAAgBvB,MAAQY,EAASW,GAE1BA,CACX,CAEA,OAAOhF,CACX,GAAE,GACN,CAACsD,EAAUC,EAAMQ,EAAmBO,EAAUC,EAAgBpB,IAG5DiC,EAAaC,EAAgC,CAC/C5C,MAAOiC,EACPf,YAAaY,IAGjB,MAAO,CACHG,WAAAA,EACAvB,aAAAA,EACAyB,cAAAA,EACAL,eAAAA,EACAa,WAAAA,EAER,EC9DeE,EAAAA,EA1GAnG,GAAK,SAAAoG,GAChB,IACItD,EAmBAsD,EAnBAtD,MACAC,EAkBAqD,EAlBArD,OACQsD,EAiBRD,EAjBAE,OACAnC,EAgBAiC,EAhBAjC,SAAQoC,EAgBRH,EAfAI,OAAAA,OAAS,IAAHD,EAAG,CAAC,YAAa,YAAWA,EAAAE,EAelCL,EAdApD,eAAAA,OAAiB,IAAHyD,EAAG,WAAUA,EAAAC,EAc3BN,EAbAnD,gBAAAA,OAAkB,IAAHyD,EAAG,IAAGA,EAAAC,EAarBP,EAZAlD,sBAAAA,OAAwB,IAAHyD,EAAG,CAAC,GAAK,IAAIA,EAAAC,EAYlCR,EAXAjD,mBAAAA,OAAkB,IAAAyD,EAAG,CAAC,EAAG,EAAG,GAAEA,EAAAC,EAW9BT,EAVAtF,UAAAA,OAAY,IAAH+F,EAAG,UAASA,EAAAC,EAUrBV,EATArF,YAAAA,OAAc,IAAH+F,EAAG,EAACA,EAAAC,EASfX,EARApF,YAAAA,OAAc,IAAH+F,EAAG,UAASA,EAAAC,EAQvBZ,EAPAa,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAOvBd,EANAe,mBAAAA,OAAqB,IAAHD,EAAG,GAAGA,EAAAE,EAMxBhB,EALAiB,mBAAAA,OAAqB,IAAHD,EAAG,UAASA,EAAAE,EAK9BlB,EAJAmB,cAAAA,OAAgB,IAAHD,GAAOA,EAAAE,EAIpBpB,EAHAnF,QAAAA,OAAO,IAAAuG,EAAG,WAAQ,EAAAA,EACTC,EAETrB,EAFAsB,QAAOC,EAEPvB,EADAwB,KAAAA,OAAO,IAAHD,EAAG,MAAKA,EAEhBE,EAA4CC,EAAchF,EAAOC,EAAQsD,GAAjEC,EAAMuB,EAANvB,OAAQyB,EAAUF,EAAVE,WAAYC,EAAWH,EAAXG,YAC5BC,EAA0EpF,EAAU,CAChFC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACArC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,IATIb,EAAS8H,EAAT9H,UAAWD,EAAI+H,EAAJ/H,KAAM8D,EAAYiE,EAAZjE,aAAcH,EAAcoE,EAAdpE,eAAgBC,EAAcmE,EAAdnE,eAYjDH,GAAQC,IAEdsE,GAA8CC,IAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YACxBC,GAAcC,GAChB,SAAC1H,EAASS,GAAK,OAAKiG,GAAiBtG,GAAWA,EAAQJ,EAASS,EAAM,GACvE,CAACiG,EAAetG,IAEduH,GAAmBD,GACrB,SAAC1H,EAASS,GAAK,OACXiG,GAAiBE,GAAWW,GAAqB9H,EAACmH,EAAO,CAAC5G,QAASA,IAAaS,EAAM,GAC1F,CAACiG,EAAea,GAAsBX,IAEpCgB,GAAkBF,GACpB,SAAC1H,EAASS,GAAK,OACXiG,GAAiBE,GAAWW,GAAqB9H,EAACmH,EAAO,CAAC5G,QAASA,IAAaS,EAAM,GAC1F,CAACiG,EAAea,GAAsBX,IAEpCiB,GAAmBH,GACrB,WAAA,OAAMhB,GAAiBc,IAAa,GACpC,CAACd,EAAec,KAGpB,OACI/H,EAACqI,EAAU,CACP7F,MAAOiF,EACPhF,OAAQiF,EACR1B,OAAQA,EACR3C,MAAOA,GACPiE,KAAMA,EAAKgB,SAEVpC,EAAOd,KAAI,SAACmD,EAAOC,GAChB,MAAc,cAAVD,GACwB,IAApB5B,EAAiC,KAGjC3G,EAACP,EAAY,CAETG,KAAMA,EACNC,UAAWA,EACXC,UAAW+G,EACX9G,UAAWgH,GAJP,aAQF,aAAVwB,EAEIvI,EAACyI,EAAQ,CAAAH,SACJzE,EAASuB,KAAI,SAAA7E,GAAO,OACjBP,EAACK,EAAa,CAEVE,QAASA,EACTX,KAAMA,EACNY,UAAWkD,EAAanD,GACxBE,YAAa8C,EAAehD,GAC5BG,YAAa8C,EAAejD,GAC5BK,aAAcsH,GACdrH,YAAasH,GACbrH,aAAcsH,GACdzH,QAASqH,IATJzH,EAAQU,QAHX,YAmBfjB,EAACyI,EAAQ,CAAAH,SAAUC,EAAMzC,IAAV0C,OAItC,KCpGME,EAAmB,SAAA5C,GAAK,OAC1B9F,EAAC2I,EAAiB,CAAAL,SACb,SAAA3I,GAAA,IAAG6C,EAAK7C,EAAL6C,MAAOC,EAAM9C,EAAN8C,OAAM,OAAOzC,EAAC4I,EAAMpD,EAAA,CAAChD,MAAOA,EAAOC,OAAQA,GAAYqD,GAAS,GAC3D,ECRlB+C,EAA2B,SAAC7H,EAAO8H,EAAIjF,EAAUf,GACnD,IAAAiG,EAAeC,EAAkBF,EAAI9H,GAA9BiI,EAACF,EAAA,GAAEG,EAACH,EAAA,GAEX,OAAOlF,EAASwB,MAAK,SAAA8D,GAAC,OAAIC,EAAYD,EAAGrG,EAAWuG,OAAO,CAACJ,EAAGC,OACnE,EA0JerD,EAAAA,EAxJMnG,GAAK,SAAAoG,GACtB,IACItD,EAwBAsD,EAxBAtD,MACAC,EAuBAqD,EAvBArD,OACQsD,EAsBRD,EAtBAE,OAAMsD,EAsBNxD,EArBAyD,WAAAA,OAAU,IAAAD,EAAqB,oBAAXE,QAAyBA,OAAOC,kBAAwB,EAACH,EAC7EzF,EAoBAiC,EApBAjC,SACAqC,EAmBAJ,EAnBAI,OAAMC,EAmBNL,EAjBApD,eAAAA,OAAiB,IAAHyD,EAAG,WAAUA,EAAAC,EAiB3BN,EAhBAnD,gBAAAA,OAAkB,IAAHyD,EAAG,IAAGA,EAAAC,EAgBrBP,EAfAlD,sBAAAA,OAAwB,IAAHyD,EAAG,CAAC,GAAK,IAAIA,EAAAC,EAelCR,EAdAjD,mBAAAA,OAAkB,IAAAyD,EAAG,CAAC,EAAG,EAAG,GAAEA,EAAAC,EAc9BT,EAZAtF,UAAAA,OAAY,IAAH+F,EAAG,UAASA,EAAAC,EAYrBV,EAXArF,YAAAA,OAAc,IAAH+F,EAAG,EAACA,EAAAC,EAWfX,EAVApF,YAAAA,OAAc,IAAH+F,EAAG,UAASA,EAAAC,EAUvBZ,EARAa,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAQvBd,EAPAe,mBAAAA,OAAqB,IAAHD,EAAG,GAAGA,EAAAE,EAOxBhB,EANAiB,mBAAAA,OAAqB,IAAHD,EAAG,UAASA,EAAAE,EAM9BlB,EAJAmB,cAAAA,OAAgB,IAAHD,GAAOA,EAAAE,EAIpBpB,EAHAnF,QAAAA,OAAO,IAAAuG,EAAG,WAAQ,EAAAA,EAAAwC,EAGlB5D,EAFAjF,YAAAA,OAAW,IAAA6I,EAAG,WAAQ,EAAAA,EACbvC,EACTrB,EADAsB,QAGEuC,EAAWC,EAAO,MAClBvG,EAAQC,IACdiE,EAA4CC,EAAchF,EAAOC,EAAQsD,GAAjEC,EAAMuB,EAANvB,OAAQyB,EAAUF,EAAVE,WAAYC,EAAWH,EAAXG,YAC5BC,EAAsFpF,EAClF,CACIC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACArC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,IAVAoC,EAAU6E,EAAV7E,WAAYjD,EAAS8H,EAAT9H,UAAWD,EAAI+H,EAAJ/H,KAAM8D,GAAYiE,EAAZjE,aAAcH,GAAcoE,EAAdpE,eAAgBC,GAAcmE,EAAdnE,eAcnEqG,GAAU,WACN,GAAKF,EAAL,CAEAA,EAASG,QAAQtH,MAAQiF,EAAa8B,EACtCI,EAASG,QAAQrH,OAASiF,EAAc6B,EAExC,IAAMQ,EAAMJ,EAASG,QAAQE,WAAW,MAExCD,EAAI/G,MAAMuG,EAAYA,GAEtBQ,EAAIE,UAAY5G,EAAM6G,WACtBH,EAAII,SAAS,EAAG,EAAG1C,EAAYC,GAC/BqC,EAAI9G,UAAU+C,EAAOoE,KAAMpE,EAAOqE,KAElCzK,EAAK0K,QAAQP,GAEb7D,EAAOqE,SAAQ,SAAAhC,GACG,cAAVA,GACwB,IAApB5B,IACAoD,EAAIjK,UAAY+G,EAChBkD,EAAIS,YAAczD,EAClBgD,EAAIU,YACJ7K,EAAKC,KACLkK,EAAI5J,UAES,aAAVoI,EACP1E,EAAS0G,SAAQ,SAAAhK,GACbwJ,EAAIU,YACJ7K,EAAKW,GACLwJ,EAAIE,UAAYvG,GAAanD,GAC7BwJ,EAAI9J,OAEJ,IAAMQ,EAAc8C,GAAehD,GAC/BE,EAAc,IACdsJ,EAAIS,YAAchH,GAAejD,GACjCwJ,EAAIjK,UAAYW,EAChBsJ,EAAI5J,SAEZ,IAEAoI,EAAMwB,EAAKjE,EAEnB,GAzCe,CA0CnB,GAAG,CACC6D,EACAlC,EACAC,EACA1B,EACAuD,EACAlG,EACAzD,EACAC,EACA6D,GACAH,GACAC,GACAK,EACAqC,IAGJ,IAAA0B,GAA8CC,IAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YACxBI,GAAkBF,GACpB,SAAAjH,GACI,GAAKiG,GAAkBE,EAAvB,CAEA,IAAM5G,EAAUsI,EAAyB7H,EAAO2I,EAASG,QAASjG,EAAUf,GACxEvC,EACAuH,GAAqB9H,EAACmH,EAAO,CAAC5G,QAASA,IAAaS,GAEpD+G,KAEJlH,GAAeA,EAAYN,GAAW,KAAMS,EARZ,CASpC,GACA,CAAC8G,GAAsBC,GAAad,EAAeE,EAASwC,EAAU9F,EAAUf,IAE9EsF,GAAmBH,GACrB,WAAA,OAAMhB,GAAiBc,IAAa,GACpC,CAACd,EAAec,KAEdC,GAAcC,GAChB,SAAAjH,GACI,GAAKiG,GAAkBtG,EAAvB,CAEA,IAAMJ,EAAUsI,EAAyB7H,EAAO2I,EAASG,QAASjG,EAAUf,GACxEvC,GACAI,EAAQJ,EAASS,EAJW,CAMpC,GACA,CAACiG,EAAe0C,EAAU9F,EAAUf,EAAYnC,IAGpD,OACIX,EAAA,SAAA,CACI0K,IAAKf,EACLnH,MAAOiF,EAAa8B,EACpB9G,OAAQiF,EAAc6B,EACtBoB,MAAO,CACHnI,MAAOiF,EACPhF,OAAQiF,EACRkD,OAAQ3D,EAAgB,OAAS,UAErCpG,YAAasH,GACbrH,aAAcsH,GACdzH,QAASqH,IAGrB,KCvJM6C,EAAyB,SAAA/E,GAAK,OAChC9F,EAAC2I,EAAiB,CAAAL,SACb,SAAA3I,GAAA,IAAG6C,EAAK7C,EAAL6C,MAAOC,EAAM9C,EAAN8C,OAAM,OAAOzC,EAAC8K,EAAYtF,EAAA,CAAChD,MAAOA,EAAOC,OAAQA,GAAYqD,GAAS,GACjE,ECXlBiF,EAAoBrL,GAAK,SAAAC,GAAiB,IAAdY,EAAOZ,EAAPY,QAC9B,YAAqBwE,IAAjBxE,EAAQuD,KAA2B,KAGnC9D,EAACgL,EAAY,CACT/J,GAAIV,EAAQyD,MACZ0B,MAAOnF,EAAQmF,MACfuF,YAAY,EACZhH,MAAO1D,EAAQkF,gBAG3B,IC+IeI,EAAAA,EApJInG,GAAK,SAAAoG,GACpB,IACItD,EA6BAsD,EA7BAtD,MACAC,EA4BAqD,EA5BArD,OACQsD,EA2BRD,EA3BAE,OACAnC,EA0BAiC,EA1BAjC,SACAC,EAyBAgC,EAzBAhC,KAAIoH,EAyBJpF,EAxBA/B,MAAAA,OAAQ,IAAHmH,EAAG,KAAIA,EAAAC,EAwBZrF,EAvBA9B,MAAAA,OAAQ,IAAHmH,EAAG,KAAIA,EAAAC,EAuBZtF,EAtBA7B,MAAAA,OAAQ,IAAHmH,EAAG,QAAOA,EACflH,EAqBA4B,EArBA5B,YAAWiC,EAqBXL,EApBApD,eAAAA,OAAiB,IAAHyD,EAAG,WAAUA,EAAAC,EAoB3BN,EAnBAnD,gBAAAA,OAAkB,IAAHyD,EAAG,IAAGA,EAAAC,EAmBrBP,EAlBAlD,sBAAAA,OAAwB,IAAHyD,EAAG,CAAC,GAAK,IAAIA,EAAAC,EAkBlCR,EAjBAjD,mBAAAA,OAAkB,IAAAyD,EAAG,CAAC,EAAG,EAAG,GAAEA,EAAA+E,EAiB9BvF,EAhBA3B,OAAAA,OAAS,IAAHkH,EAAG,SAAQA,EACjBhH,EAeAyB,EAfAzB,OAAMiH,EAeNxF,EAdA1B,aAAAA,OAAe,IAAHkH,EAAG,OAAMA,EAAA9E,EAcrBV,EAbArF,YAAAA,OAAc,IAAH+F,EAAG,EAACA,EAAAC,EAafX,EAZApF,YAAAA,OAAc,IAAH+F,EAAG,UAASA,EAAAC,EAYvBZ,EAXAa,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAWvBd,EAVAe,mBAAAA,OAAqB,IAAHD,EAAG,GAAGA,EAAAE,EAUxBhB,EATAiB,mBAAAA,OAAqB,IAAHD,EAAG,UAASA,EAAAb,EAS9BH,EARAI,OAAAA,OAAM,IAAAD,EAAG,CAAC,YAAa,WAAY,WAAUA,EAAAsF,EAQ7CzF,EAPA0F,QAAAA,QAAU,IAAHD,EAAG,GAAEA,EAAAvE,GAOZlB,EANAmB,cAAAA,QAAgB,IAAHD,IAAOA,GAAAE,GAMpBpB,EALAnF,QAAAA,QAAO,IAAAuG,GAAG,WAAQ,EAAAA,GAAAuE,GAKlB3F,EAJAsB,QAASD,QAAU4D,IAAHU,GAAGV,EAAiBU,GAAApE,GAIpCvB,EAHAwB,KAAAA,QAAO,IAAHD,GAAG,MAAKA,GAAAqE,GAGZ5F,EAFA6F,KAAAA,QAAO,IAAHD,GAAG,GAAEA,GAAAE,GAET9F,EADA7F,KAAAA,QAAO,IAAH2L,GAAG,GAAEA,GAGbrE,GAA4CC,EAAchF,EAAOC,EAAQsD,GAAjEC,GAAMuB,GAANvB,OAAQyB,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAC5BC,GAA4DpF,EAAU,CAClEC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EAEArC,UAAW,WAAQ,EACnBC,YAAAA,EACAC,YAAAA,IAVIb,GAAS8H,GAAT9H,UAAWD,GAAI+H,GAAJ/H,KAAM2D,GAAcoE,GAAdpE,eAAgBC,GAAcmE,GAAdnE,eAYzCqI,GAAoDlI,EAAc,CAC9DE,SAAAA,EACAC,KAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,OAAAA,IATIX,GAAYmI,GAAZnI,aAAcyB,GAAa0G,GAAb1G,cAAeQ,GAAUkG,GAAVlG,WAY/BtC,GAAQC,IAERwI,GAAYC,EAASJ,GAAMxG,GAAelF,GAAM,CAClD+L,QAAS,OACTC,UAAW,SAGfrE,GAA8CC,IAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YACxBC,GAAcC,GAChB,SAAC1H,EAASS,GAAK,OAAKiG,IAAiBtG,IAAWA,GAAQJ,EAASS,EAAM,GACvE,CAACiG,GAAetG,KAEduH,GAAmBD,GACrB,SAAC1H,EAASS,GAAK,OACXiG,IAAiBE,IAAWW,GAAqB9H,EAACmH,GAAO,CAAC5G,QAASA,IAAaS,EAAM,GAC1F,CAACiG,GAAea,GAAsBX,KAEpCgB,GAAkBF,GACpB,SAAC1H,EAASS,GAAK,OACXiG,IAAiBE,IAAWW,GAAqB9H,EAACmH,GAAO,CAAC5G,QAASA,IAAaS,EAAM,GAC1F,CAACiG,GAAea,GAAsBX,KAEpCiB,GAAmBH,GACrB,WAAA,OAAMhB,IAAiBc,IAAa,GACpC,CAACd,GAAec,KAGpB,OACI/H,EAACqI,EAAU,CACP7F,MAAOiF,GACPhF,OAAQiF,GACR1B,OAAQA,GACR3C,MAAOA,GACPsI,KAAMG,GACNxE,KAAMA,GAAKgB,SAEVpC,EAAOd,KAAI,SAACmD,EAAOC,GAChB,MAAc,cAAVD,GACwB,IAApB5B,EAAiC,KAGjC3G,EAACP,EAAY,CAETG,KAAMA,GACNC,UAAWA,GACXC,UAAW+G,EACX9G,UAAWgH,GAJP,aAQF,aAAVwB,EAEIvI,EAACyI,EAAQ,CAAAH,SACJnD,GAAcC,KAAI,SAAA7E,GAAO,OACtBP,EAACK,EAAa,CAEVE,QAASA,EACTX,KAAMA,GACNY,UAAWkD,GAAanD,GACxBE,YAAa8C,GAAehD,GAC5BG,YAAa8C,GAAejD,GAC5BK,aAAcsH,GACdrH,YAAasH,GACbrH,aAAcsH,GACdzH,QAASqH,IATJzH,EAAQU,QAHX,YAkBR,YAAVsH,EACOiD,GAAQpG,KAAI,SAAC8G,EAAQ1D,GACxB,OACIxI,EAACmM,EAAY3G,EAAA,CAET4G,eAAgB5J,EAChB6J,gBAAiB5J,EACjBqB,KAAM6B,IACFuG,GAJC1D,EAOjB,IAGGxI,EAACyI,EAAQ,CAAAH,SAAUC,EAAM,KAAVC,OAItC,KChJM8D,EAAuB,SAAAxG,GAAK,OAC9B9F,EAAC2I,EAAiB,CAAAL,SACb,SAAA3I,GAAA,IAAG6C,EAAK7C,EAAL6C,MAAOC,EAAM9C,EAAN8C,OAAM,OAAOzC,EAACuM,EAAU/G,EAAA,CAAChD,MAAOA,EAAOC,OAAQA,GAAYqD,GAAS,GAC/D,ECNlB+C,EAA2B,SAAC7H,EAAO8H,EAAIjF,EAAUf,GACnD,IAAAiG,EAAeC,EAAkBF,EAAI9H,GAA9BiI,EAACF,EAAA,GAAEG,EAACH,EAAA,GAEX,OAAOlF,EAASwB,MAAK,SAAA8D,GAAC,OAAIC,EAAYD,EAAGrG,EAAWuG,OAAO,CAACJ,EAAGC,OACnE,EAmMerD,EAAAA,EAjMUnG,GAAK,SAAAoG,GAC1B,IACItD,EA4BAsD,EA5BAtD,MACAC,EA2BAqD,EA3BArD,OACQsD,EA0BRD,EA1BAE,OAAMsD,EA0BNxD,EAzBAyD,WAAAA,OAAU,IAAAD,EAAqB,oBAAXE,QAAyBA,OAAOC,kBAAwB,EAACH,EAC7EzF,EAwBAiC,EAxBAjC,SACAC,EAuBAgC,EAvBAhC,KAAIoH,EAuBJpF,EAtBA/B,MAAAA,OAAQ,IAAHmH,EAAG,KAAIA,EAAAC,EAsBZrF,EArBA9B,MAAAA,OAAQ,IAAHmH,EAAG,KAAIA,EAAAC,EAqBZtF,EApBA7B,MAAAA,OAAQ,IAAHmH,EAAG,QAAOA,EACflH,EAmBA4B,EAnBA5B,YAAWiC,EAmBXL,EAlBApD,eAAAA,OAAiB,IAAHyD,EAAG,WAAUA,EAAAC,EAkB3BN,EAjBAnD,gBAAAA,OAAkB,IAAHyD,EAAG,IAAGA,EAAAC,EAiBrBP,EAhBAlD,sBAAAA,OAAwB,IAAHyD,EAAG,CAAC,GAAK,IAAIA,EAAAC,EAgBlCR,EAfAjD,mBAAAA,OAAkB,IAAAyD,EAAG,CAAC,EAAG,EAAG,GAAEA,EAAA+E,EAe9BvF,EAdA3B,OAAAA,OAAS,IAAHkH,EAAG,SAAQA,EACjBhH,EAaAyB,EAbAzB,OAAMiH,EAaNxF,EAZA1B,aAAAA,OAAe,IAAHkH,EAAG,OAAMA,EAAA9E,EAYrBV,EAXArF,YAAAA,OAAc,IAAH+F,EAAG,EAACA,EAAAC,EAWfX,EAVApF,YAAAA,OAAc,IAAH+F,EAAG,UAASA,EAAAC,EAUvBZ,EATAa,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EASvBd,EARAe,mBAAAA,OAAqB,IAAHD,EAAG,GAAGA,EAAAE,EAQxBhB,EAPAiB,mBAAAA,OAAqB,IAAHD,EAAG,UAASA,EAAAb,EAO9BH,EANAI,OAAAA,OAAM,IAAAD,EAAG,CAAC,YAAa,WAAY,WAAUA,EAAAsF,EAM7CzF,EALA0F,QAAAA,QAAU,IAAHD,EAAG,GAAEA,EAAAvE,GAKZlB,EAJAmB,cAAAA,QAAgB,IAAHD,IAAOA,GAAAE,GAIpBpB,EAHAnF,QAAAA,QAAO,IAAAuG,GAAG,WAAQ,EAAAA,GAAAwC,GAGlB5D,EAFAjF,YAAAA,QAAW,IAAA6I,GAAG,WAAQ,EAAAA,GAAA+B,GAEtB3F,EADAsB,QAASD,QAAU4D,IAAHU,GAAGV,EAAiBU,GAElC9B,GAAWC,EAAO,MAClBvG,GAAQC,IACdiE,GAA4CC,EAAchF,EAAOC,EAAQsD,GAAjEC,GAAMuB,GAANvB,OAAQyB,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAC5BC,GAAwEpF,EAAU,CAC9EC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACArC,UAAW,WAAQ,EACnBC,YAAAA,EACAC,YAAAA,IATIoC,GAAU6E,GAAV7E,WAAYjD,GAAS8H,GAAT9H,UAAWD,GAAI+H,GAAJ/H,KAAM2D,GAAcoE,GAAdpE,eAAgBC,GAAcmE,GAAdnE,eAWrDqI,GAAoDlI,EAAc,CAC9DE,SAAAA,EACAC,KAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,OAAAA,IATIX,GAAYmI,GAAZnI,aAAcyB,GAAa0G,GAAb1G,cAAeQ,GAAUkG,GAAVlG,WAYrCkE,GAAU,WACN,GAAKF,GAAL,CAEAA,GAASG,QAAQtH,MAAQiF,GAAa8B,EACtCI,GAASG,QAAQrH,OAASiF,GAAc6B,EAExC,IAAMQ,EAAMJ,GAASG,QAAQE,WAAW,MAExCD,EAAI/G,MAAMuG,EAAYA,GAEtBQ,EAAIE,UAAY5G,GAAM6G,WACtBH,EAAII,SAAS,EAAG,EAAG1C,GAAYC,IAC/BqC,EAAI9G,UAAU+C,GAAOoE,KAAMpE,GAAOqE,KAElCzK,GAAK0K,QAAQP,GAEb7D,EAAOqE,SAAQ,SAAAhC,GACG,cAAVA,GACwB,IAApB5B,IACAoD,EAAIjK,UAAY+G,EAChBkD,EAAIS,YAAczD,EAClBgD,EAAIU,YACJ7K,GAAKC,MACLkK,EAAI5J,UAES,aAAVoI,EACPpD,GAAcoF,SAAQ,SAAAhK,GAClBwJ,EAAIU,YACJ7K,GAAKW,GACLwJ,EAAIE,UAAYvG,GAAanD,GAC7BwJ,EAAI9J,OAEJ,IAAMQ,EAAc8C,GAAehD,GAC/BE,EAAc,IACdsJ,EAAIS,YAAchH,GAAejD,GACjCwJ,EAAIjK,UAAYW,EAChBsJ,EAAI5J,SAEZ,IACiB,YAAVoI,GACPiD,GAAQjB,SAAQ,SAAA2B,GACZM,EAAqBzC,EAAGvE,KACjB0G,EAAM,CACTpI,KAAM6B,GACNyG,eAAgB5J,EAChB6J,gBAAiB5J,EACjBY,MAAAA,KAER,GAIR,GAnDe,CAoDnB,GAAG,CACCsG,GACAlC,GACAC,GACA1B,GACAuD,EACAlG,GACAzD,GACAC,GACA6D,GACAH,GACAC,GACA2B,GACAqG,GACAtF,IAGJ,IAAA0B,GAA8CC,IAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YACxBI,GAAkBF,GACpB,SAAAjH,GACI,GAAKiG,IAAkBE,GAAvB,CAEA,IAAM5G,EAAUsI,EACZ7H,EACA2I,GAASG,QACT3E,GACArC,IAEAvC,EACAuH,GAAqB9H,EAACmH,GAAO,CAAC5G,QAASA,IAAaS,GAEpD+G,KAEJlH,IAAeA,GAAYN,GAAW,KAAMS,EAbZ,CAcpC,GACA,CACI8G,GACAC,GACAd,GACAE,GACAwC,GACAxE,GACArC,KAGFsF,GAAmBH,GACrB,WAAA,OAAMhB,IAAiBc,IAAa,GACpC,CAACd,GAAec,KAEdC,GAAcC,GAChB,SAAAjH,GACI,GAAKiG,IAAkBtG,GAAvB,CAEA,IAAMJ,EAAUsI,EACZ7H,EACA2I,GAASG,QACT3E,GACArC,IAEAvC,GACAI,GAAQJ,EAASS,EATW,CAWpC,GACA,CAACiG,GAAe0C,GAAUxE,GAAerC,GAAYnC,KAGzD,OACIX,EAAA,SAAA,CACI0K,IAAKf,GACLnH,MAAOiF,GAAa8B,EACpB9G,OAAQiF,GAAc6B,EACtBoB,MAAO,CACHnI,MAAOiF,GACPhF,OAAQiF,GACRkD,OAAQ3D,GAAgB,OAAS,UAErCpG,YAAasH,GACbrH,aAAcsH,GACdzH,QAASqH,IAGrB,KClMMyE,EAA6B,SAAA3G,GAAK,OACpC9F,EAAC2I,EAAiB,CAAAL,SACb,SAAA3I,GAAA,IAAG6C,EAAK7C,EAAL6C,MAAOC,EAAM9C,EAAN8C,OAAM,OAAOzC,EAAC0M,EAAgBlH,EAAA,CAAChD,MAAOA,EAAOC,OAAQA,GAAYqD,GAAS,GACrE,ECZlB6G,GAAqB,CACvBjK,eAAgB,WAChBC,gBAAiB,IACjBC,sBAAuB,CAAC,GAAK,IAC7BC,mBAAoB,CAAC,EAAG,EAAG,GAE3B8D,iBAAiB,EACjBE,mBAAoB,GACpBE,mBAAoB,UAEpBvG,UAAW,UACXC,YAAa,EACbC,YAAa,UAEbuG,eAAe,EACfrG,aAAc,WAAQ,EACtBE,aAAc,WAAQ,EACtBD,YAAa,WAAQ,EACrBF,QAAS,WAAQ,EAEjBuF,OAAQ,CAAC,YAAa,YACtBsF,QAAS,GAETvL,KAAM,GACN0L,KAAM,IAGGiB,GAAkBpH,KACxBmH,GAAkB,CACrBrF,KAAM,QAGGuF,GAAwBrH,KAC9BmH,GAAkB,CACrBpD,WAA8B,oBAAXC,QAAyBA,OAAOC,kBAAwB,IAGzEqD,GAA+B,CACjC/I,MAAO,KACPC,MAAO,KACPC,MAAO,QACPE,OAAQ,SACRC,aAAc,OACdgD,QAAS2D,EACT7E,OAAQ,CAAC,YAAa,WAAY,YAGzB6G,GAAsBvH,EAC5BoH,GAAAA,GACAE,GAA4B,CAC/BxF,KAAM,QAGG0F,GAA4BxH,KAClCqH,GACAC"}